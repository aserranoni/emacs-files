#+STARTIP: overview 

* Base
** Extra KeyBindings for built-in functions
#+BEGIN_SRC emacs-lisp
;(global-set-key (kbd "C-c s") (quote eshell)) ;; open eshell with --
#+END_SRC   
   
* Visual/Interface

  - The visual configurations for emacs. Includes themes, hiding menus,
  startup message, window and buffer management ...

** Setting variables to hide menus, startup message and muting  

#+BEGIN_SRC emacs-lisp

  (setq inhibit-startup-message t)
  (setq visible-bell 1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
   
#+END_SRC 

** Themes
   
- First we install the package containing the desired theme(s). Check out for these packages by running the list-packages function.

#+BEGIN_SRC emacs-lisp   
  (use-package spacemacs-theme
      :ensure t)

   (load-theme (quote spacemacs-dark))

'(custom-safe-themes
   (quote
    ("bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" default)))
 
#+END_SRC

** Buffer Management
*** Show Buffers as Tabs Using tabbar and tabbar-ruler - Disabled
  - Package Install and Configuration   
  #+BEGIN_SRC emacs-lisp
      ;Install and Configure tabbar

   ;   (use-package tabbar
   ;          :ensure t
   ;          :config (tabbar-mode 1)
   ;           )
            
      ;Install and Configure tabbar-ruler

     ; (use-package tabbar-ruler
     ;        :ensure t
     ;       :config ((setq tabbar-ruler-global-tabbar t)    ; get tabbar
     ;                  (setq tabbar-ruler-global-ruler nil)   ; get global ruler
     ;                  (setq tabbar-ruler-popup-menu t)       ; get popup menu.
     ;                  (setq tabbar-ruler-popup-toolbar t)    ; get popup toolbar
     ;                  (setq tabbar-ruler-popup-scrollbar t)) ;
     ;         )  

         
    #+END_SRC
  - Set-up keybindings
  #+BEGIN_SRC emacs-lisp
    ;tabbar-backward
    ;tabbar-backward-tab (C-x C-left)
    ;tabbar-forward-tab (C-x C-right)
    ;tabbar-forward 
  #+END_SRC

** Window Management
*** Winner Mode
    - winner-mode keeps track of your recent window configurations. To navigate between them use C-c and the left/right arrow
    #+BEGIN_SRC emacs-lisp
     (winner-mode 1)
    #+END_SRC

*** Ace Window Manager

    #+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
:init
(progn
(global-set-key [remap other-window] 'ace-window)
(custom-set-faces
'(aw-leading-char-face
((t (:inherit ace-jump-face-foreground :height 2.0)))))
))
  
    #+END_SRC 

*** Winmove - Can Replace Ace - Disabled  
    - Uses Shift + Arrows to navigate between windows - Disabled
   #+BEGIN_SRC emacs-lisp    
     ;(windmove-default-keybindings)
   #+END_SRC
    
** Helm
*** Install

#+BEGIN_SRC emacs-lisp
   (use-package helm
       :ensure t)
(require 'helm-config)  
 #+END_SRC
    
*** Setting KeyBindings for Helm
      #+BEGiN_SRC emacs-lisp
    (global-set-key [134217848] (quote helm-M-x)) ; M-x -> helm-M-x
    (global-set-key [24 6] (quote helm-find-files)) ;C-x C-f -> helm-find-files
    (global-set-key [24 2] (quote helm-buffers-list)) ;C-x C-b -> helm-buffers-list
    
#+END_SRC
    
* Functionality

  - Diverse Functionality

** Search with Swiper

  #+BEGIN_SRC emacs-lisp
(use-package counsel
:ensure t
)

(use-package swiper
:ensure try
:config
(progn
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
))  
#+END_SRC
   
** Auto-completion

 Needing to run function to startup!!

 #+BEGIN_SRC emacs-lisp
   (use-package auto-complete
   :ensure t)
  #+END_SRC

#+BEGIN_SRC emacs-lisp
(auto-complete-mode)
#+END_SRC

** Try
This package allows one to test packages from melpa before installing them.

#+BEGIN_SRC emacs-lisp
(use-package try
:ensure t)
#+END_SRC 

** Which Key

   - Opens up possible key bindings in current context

#+BEGIN_SRC emacs-lisp

(use-package which-key
:ensure t
:config
(which-key-mode))

#+END_SRC 
    
** Navigation with Avy
 
*** Install package
#+BEGIN_SRC emacs-lisp
(use-package avy
:ensure t
:config
(avy-setup-default))
 #+END_SRC
*** Set-up KeyBindings
    - How to use the avy-goto-word-1 function?
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-n w") 'avy-goto-word-0) ;; Navigate to word
(global-set-key (kbd "M-n c") 'avy-goto-char) ;; Navigate to char
(global-set-key (kbd "M-n l") 'avy-goto-line) ;; Navigate ro line
#+END_SRC

#+RESULTS:
: avy-goto-line

** Git
** Pdf-tools

* Major Modes

** Python
*** Elpy
**** Install
    #+BEGIN_SRC emacs-lisp
  (use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+END_SRC

    #+RESULTS:

**** Config
     #+BEGIN_SRC emacs-lisp
(setq elpy-modules
   (quote
    (elpy-module-company elpy-module-eldoc elpy-module-pyvenv elpy-module-highlight-indentation elpy-module-yasnippet elpy-module-django elpy-module-autodoc elpy-module-sane-defaults)))
 (setq elpy-rpc-python-command "python3")
      #+END_SRC

** ESS-R
** Org 
*** Org-Reveal
    - Package that turns renders org files as awesome presentations using reveal.js package
    - requires reveal.js installation  
#+BEGIN_SRC emacs-lisp
;(use-package ox-reveal
;:ensure ox-reveal)

;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
;(setq org-reveal-mathjax t)

;(use-package htmlize
;:ensure t)      
#+END_SRC

** LaTeX
** Wolfram Language
         
x
